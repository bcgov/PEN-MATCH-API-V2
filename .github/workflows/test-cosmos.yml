name: Test Cosmos DB Connection via App Service

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/cosmos.py'
      - '.github/workflows/test-cosmos.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  test-cosmos-connection:
    name: Test Cosmos DB Connection
    runs-on: ubuntu-latest
    environment: dev
    timeout-minutes: 10
    
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      APP_SERVICE_NAME: ${{ secrets.APP_SERVICE_NAME }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Prepare Test App
        run: |
          echo "üì¶ Preparing cosmos test app..."
          mkdir -p deployment
          cp app/cosmos.py deployment/
          
          # Simple requirements
          echo "azure-cosmos>=4.5.0" > deployment/requirements.txt
          echo "azure-identity>=1.15.0" >> deployment/requirements.txt
          
          # Simple startup script that runs cosmos.py and prints result
          cat > deployment/run_test.py << 'EOF'
          import sys
          import logging
          from cosmos import test_connection
          
          # Configure logging so we can see output in App Service logs
          logging.basicConfig(level=logging.INFO, format='%(message)s')
          logger = logging.getLogger(__name__)
          
          logger.info("=== COSMOS DB CONNECTION TEST START ===")
          try:
              result = test_connection()
              logger.info(f"TEST RESULT: {result}")
              logger.info("=== COSMOS DB CONNECTION TEST END ===")
          except Exception as e:
              logger.error(f"TEST FAILED: {str(e)}")
              logger.info("=== COSMOS DB CONNECTION TEST END ===")
          EOF

      - name: Configure App Service Environment
        run: |
          echo "‚öôÔ∏è Setting environment variables..."
          az webapp config appsettings set \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $APP_SERVICE_NAME \
            --settings \
              AZURE_COSMOSDB_ENDPOINT="${{ secrets.AZURE_COSMOSDB_ENDPOINT }}" \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true
          
          # Set startup command to run our test
          az webapp config set \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $APP_SERVICE_NAME \
            --startup-file "python run_test.py"

      - name: Deploy to App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.APP_SERVICE_NAME }}
          package: './deployment'

      - name: Wait and Check Test Results in Logs
        run: |
          echo "‚è≥ Waiting for app deployment and test execution..."
          sleep 60
          
          echo "üìã Checking App Service logs for test results..."
          
          # Get logs and look for our test results
          LOGS=$(az webapp log tail \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $APP_SERVICE_NAME \
            --timeout 60 2>&1 || echo "")
          
          echo "=== APP SERVICE LOGS ==="
          echo "$LOGS"
          echo "========================"
          
          # Check if test passed
          if echo "$LOGS" | grep -q "‚úÖ Connected!"; then
            echo "‚úÖ COSMOS DB CONNECTION TEST PASSED"
            echo "App Service successfully connected to Cosmos DB via private endpoint!"
          elif echo "$LOGS" | grep -q "‚ùå Failed:"; then
            echo "‚ùå COSMOS DB CONNECTION TEST FAILED"
            echo "Check the error message in logs above"
            exit 1
          else
            echo "‚ö†Ô∏è Could not determine test result from logs"
            echo "The app may still be starting or there's a logging issue"
            exit 1
          fi