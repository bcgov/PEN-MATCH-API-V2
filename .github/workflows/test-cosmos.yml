name: Test Azure Cosmos DB (Fixed)

on:
  workflow_dispatch:
    inputs:
      test_data_count:
        description: 'Number of test records to create'
        required: false
        default: '10'
        type: string

env:
  # Only need the connection string for Node.js SDK
  AZURE_COSMOSDB_CONNECTION_STRING: ${{ secrets.AZURE_COSMOSDB_CONNECTION_STRING }}
  TEST_CONTAINER_NAME: "test-pen-records"
  TEST_DATABASE_NAME: "test-pen-database"

jobs:
  test-cosmos-db:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        echo "Installing Azure Cosmos DB SDK..."
        npm init -y
        npm install @azure/cosmos uuid

    - name: Validate Configuration
      run: |
        echo "Validating Cosmos DB configuration..."
        if [ -z "$AZURE_COSMOSDB_CONNECTION_STRING" ]; then
          echo "❌ AZURE_COSMOSDB_CONNECTION_STRING is not set"
          echo "Please add this secret to your GitHub repository"
          exit 1
        fi
        
        # Extract endpoint from connection string for validation
        if [[ "$AZURE_COSMOSDB_CONNECTION_STRING" =~ AccountEndpoint=([^;]+) ]]; then
          ENDPOINT="${BASH_REMATCH[1]}"
          echo "✅ Found endpoint in connection string: $ENDPOINT"
        else
          echo "❌ Invalid connection string format"
          exit 1
        fi

    - name: Test Connection and Create Resources
      run: |
        echo "Testing Cosmos DB connection and creating test resources..."
        
        cat > test-cosmos-complete.js << 'EOF'
        const { CosmosClient } = require('@azure/cosmos');
        const { v4: uuidv4 } = require('uuid');
        
        async function testCosmosDB() {
          try {
            console.log('🔗 Connecting to Cosmos DB...');
            
            // Create client using connection string (simplest method)
            const client = new CosmosClient(process.env.AZURE_COSMOSDB_CONNECTION_STRING);
            
            // Test connection by listing databases
            console.log('📋 Testing connection...');
            const { resources: databases } = await client.databases.readAll().fetchAll();
            console.log(`✅ Connected successfully! Found ${databases.length} existing databases`);
            
            // Create test database
            console.log('📦 Creating test database...');
            const { database } = await client.databases.createIfNotExists({
              id: process.env.TEST_DATABASE_NAME,
              throughput: 400
            });
            console.log(`✅ Database ready: ${database.id}`);
            
            // Create test container
            console.log('📋 Creating test container...');
            const containerDef = {
              id: process.env.TEST_CONTAINER_NAME,
              partitionKey: {
                paths: ['/pen'],
                kind: 'Hash'
              },
              indexingPolicy: {
                indexingMode: 'consistent',
                automatic: true,
                includedPaths: [{ path: '/*' }],
                excludedPaths: [{ path: '/"_etag"/?' }]
              }
            };
            
            const { container } = await database.containers.createIfNotExists(containerDef);
            console.log(`✅ Container ready: ${container.id}`);
            
            // Test data operations
            console.log('💾 Testing data operations...');
            
            // Create test record
            const testRecord = {
              id: uuidv4(),
              pen: 'TEST001',
              legalFirstName: 'John',
              legalMiddleNames: 'Test',
              legalLastName: 'Doe',
              dob: '1990-01-01',
              localID: 'LOCAL001',
              createdAt: new Date().toISOString(),
              testRecord: true
            };
            
            // Insert record
            const { resource: created } = await container.items.create(testRecord);
            console.log(`✅ Record created with ID: ${created.id}`);
            
            // Read record
            const { resource: read } = await container.item(created.id, 'TEST001').read();
            console.log(`✅ Record read: ${read.legalFirstName} ${read.legalLastName}`);
            
            // Query records
            const { resources: queryResults } = await container.items
              .query('SELECT * FROM c WHERE c.testRecord = true')
              .fetchAll();
            console.log(`✅ Query found ${queryResults.length} test records`);
            
            // Generate and insert multiple test records
            const testCount = parseInt(process.env.TEST_DATA_COUNT || '5');
            console.log(`📝 Generating ${testCount} additional test records...`);
            
            const names = {
              first: ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 'Frank', 'Grace', 'Henry'],
              last: ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis'],
              middle: ['Ann', 'Lee', 'Ray', 'May', 'Joy', 'Sue', 'Kay', 'Lou']
            };
            
            for (let i = 1; i <= testCount; i++) {
              const record = {
                id: uuidv4(),
                pen: `PEN${String(i).padStart(6, '0')}`,
                legalFirstName: names.first[i % names.first.length],
                legalMiddleNames: Math.random() > 0.3 ? names.middle[i % names.middle.length] : null,
                legalLastName: names.last[i % names.last.length],
                dob: new Date(1980 + (i % 40), (i % 12), (i % 28) + 1).toISOString().split('T')[0],
                localID: Math.random() > 0.5 ? `LOCAL${String(i).padStart(4, '0')}` : null,
                createdAt: new Date().toISOString(),
                testRecord: true
              };
              
              try {
                await container.items.create(record);
                if (i % 2 === 0) console.log(`   Inserted ${i}/${testCount} records...`);
              } catch (error) {
                console.error(`Failed to insert record ${record.pen}:`, error.message);
              }
            }
            
            // Final verification
            const { resources: finalResults } = await container.items
              .query('SELECT * FROM c WHERE c.testRecord = true')
              .fetchAll();
            console.log(`✅ Final verification: ${finalResults.length} total test records`);
            
            // Test performance
            console.log('⚡ Testing query performance...');
            const perfStart = Date.now();
            const { resources: perfResults } = await container.items
              .query("SELECT * FROM c WHERE c.legalFirstName = 'Alice'")
              .fetchAll();
            const perfTime = Date.now() - perfStart;
            console.log(`📊 Performance test: Found ${perfResults.length} records in ${perfTime}ms`);
            
            console.log('🎉 All tests completed successfully!');
            
          } catch (error) {
            console.error('❌ Test failed:', error.message);
            
            // Provide helpful error messages
            if (error.message.includes('firewall') || error.message.includes('blocked') || error.code === 403) {
              console.error('💡 This appears to be a firewall/network access issue.');
              console.error('💡 Solutions:');
              console.error('   1. Enable "Allow access from Azure services" in Cosmos DB networking');
              console.error('   2. Add GitHub Actions IP ranges to firewall');
              console.error('   3. Use a self-hosted runner in your VNet');
            } else if (error.message.includes('unauthorized') || error.code === 401) {
              console.error('💡 Authentication issue - check your connection string');
            } else if (error.message.includes('connection string')) {
              console.error('💡 Invalid connection string format');
            }
            
            process.exit(1);
          }
        }
        
        testCosmosDB();
        EOF
        
        TEST_DATA_COUNT="${{ github.event.inputs.test_data_count || '5' }}" node test-cosmos-complete.js

    - name: Cleanup Test Resources
      if: always()
      run: |
        echo "Cleaning up test resources..."
        
        cat > cleanup.js << 'EOF'
        const { CosmosClient } = require('@azure/cosmos');
        
        async function cleanup() {
          try {
            const client = new CosmosClient(process.env.AZURE_COSMOSDB_CONNECTION_STRING);
            const database = client.database(process.env.TEST_DATABASE_NAME);
            
            console.log('🧹 Cleaning up test resources...');
            
            try {
              await database.container(process.env.TEST_CONTAINER_NAME).delete();
              console.log('✅ Test container deleted');
            } catch (error) {
              console.log('⚠️ Container cleanup: ' + error.message);
            }
            
            try {
              await database.delete();
              console.log('✅ Test database deleted');
            } catch (error) {
              console.log('⚠️ Database cleanup: ' + error.message);
            }
            
          } catch (error) {
            console.log('⚠️ Cleanup completed with warnings');
          }
        }
        
        cleanup();
        EOF
        
        node cleanup.js