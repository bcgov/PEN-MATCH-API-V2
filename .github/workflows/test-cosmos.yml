name: Test Azure Cosmos DB

on:
  workflow_dispatch:
    inputs:
      test_data_count:
        description: 'Number of test records to create'
        required: false
        default: '10'
        type: string
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - '.github/workflows/test-cosmos.yml'
  pull_request:
    branches: [ main ]

env:
  AZURE_COSMOSDB_CONNECTION_STRING: ${{ secrets.AZURE_COSMOSDB_CONNECTION_STRING }}
  AZURE_COSMOSDB_ENDPOINT: ${{ secrets.AZURE_COSMOSDB_ENDPOINT }}
  AZURE_COSMOSDB_KEY: ${{ secrets.AZURE_COSMOSDB_KEY }}
  AZURE_COSMOSDB_DATABASE_NAME: ${{ secrets.AZURE_COSMOSDB_DATABASE_NAME }}
  AZURE_COSMOSDB_CONTAINER_NAME: ${{ secrets.AZURE_COSMOSDB_CONTAINER_NAME }}
  TEST_CONTAINER_NAME: "test-pen-records"
  TEST_DATABASE_NAME: "test-pen-database"

jobs:
  test-cosmos-db:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        always-auth: false
        check-latest: false

    - name: Install dependencies
      run: |
        if [ -f "package.json" ]; then
          echo "Installing npm dependencies..."
          npm install
        else
          echo "No package.json found, installing Azure Cosmos DB SDK..."
          npm init -y
          npm install @azure/cosmos uuid
        fi

    - name: Install required tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl

    - name: Validate Cosmos DB Configuration
      run: |
        echo "Validating Cosmos DB configuration..."
        
        # Check required environment variables
        if [ -z "$AZURE_COSMOSDB_ENDPOINT" ]; then
          echo "❌ AZURE_COSMOSDB_ENDPOINT is not set"
          exit 1
        fi
        
        if [ -z "$AZURE_COSMOSDB_KEY" ]; then
          echo "❌ AZURE_COSMOSDB_KEY is not set"
          exit 1
        fi
        
        if [ -z "$AZURE_COSMOSDB_DATABASE_NAME" ]; then
          echo "❌ AZURE_COSMOSDB_DATABASE_NAME is not set"
          exit 1
        fi
        
        if [ -z "$AZURE_COSMOSDB_CONTAINER_NAME" ]; then
          echo "❌ AZURE_COSMOSDB_CONTAINER_NAME is not set"
          exit 1
        fi
        
        # Validate endpoint format
        if [[ ! "$AZURE_COSMOSDB_ENDPOINT" =~ ^https://.*\.documents\.azure\.com:443/?$ ]]; then
          echo "❌ AZURE_COSMOSDB_ENDPOINT format is incorrect"
          echo "Expected format: https://account-name.documents.azure.com:443/"
          exit 1
        fi
        
        echo "✅ Cosmos DB configuration validated"

    - name: Test Cosmos DB Connectivity
      run: |
        echo "Testing Cosmos DB connectivity..."
        
        # Extract account name from endpoint
        ACCOUNT_NAME=$(echo "$AZURE_COSMOSDB_ENDPOINT" | sed 's|https://||' | sed 's|\.documents\.azure\.com:443.*||')
        echo "Testing connection to account: $ACCOUNT_NAME"
        
        # Test basic connectivity using REST API
        TIMESTAMP=$(date -u +"%a, %d %b %Y %H:%M:%S GMT")
        
        # Create authorization header (simplified for GET request)
        AUTH_HEADER="type%3dmaster%26ver%3d1.0%26sig%3d$AZURE_COSMOSDB_KEY"
        
        RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          -H "Authorization: $AUTH_HEADER" \
          -H "x-ms-date: $TIMESTAMP" \
          -H "x-ms-version: 2020-07-15" \
          "$AZURE_COSMOSDB_ENDPOINT/dbs")
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTPSTATUS:" | sed 's/.*HTTPSTATUS:\([0-9]*\)/\1/')
        
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "401" ]; then
          echo "✅ Cosmos DB endpoint is reachable"
        else
          echo "❌ Cannot connect to Cosmos DB"
          echo "HTTP Status Code: $HTTP_CODE"
          exit 1
        fi

    - name: Create Test Database and Container
      run: |
        echo "Creating test database and container..."
        
        # Create Node.js script for database operations
        cat > test-cosmos-setup.js << 'EOF'
        const { CosmosClient } = require('@azure/cosmos');
        
        async function setupTestEnvironment() {
          try {
            const client = new CosmosClient({
              endpoint: process.env.AZURE_COSMOSDB_ENDPOINT,
              key: process.env.AZURE_COSMOSDB_KEY
            });
            
            console.log('📦 Creating test database...');
            const { database } = await client.databases.createIfNotExists({
              id: process.env.TEST_DATABASE_NAME,
              throughput: 400 // Minimum for testing
            });
            
            console.log('📋 Creating test container...');
            const containerDef = {
              id: process.env.TEST_CONTAINER_NAME,
              partitionKey: {
                paths: ['/pen'],
                kind: 'Hash'
              },
              indexingPolicy: {
                indexingMode: 'consistent',
                automatic: true,
                includedPaths: [
                  {
                    path: '/*'
                  }
                ],
                excludedPaths: [
                  {
                    path: '/"_etag"/?'
                  }
                ]
              }
            };
            
            const { container } = await database.containers.createIfNotExists(containerDef);
            
            console.log('✅ Test environment setup completed');
            console.log(`Database: ${database.id}`);
            console.log(`Container: ${container.id}`);
            
          } catch (error) {
            console.error('❌ Setup failed:', error.message);
            process.exit(1);
          }
        }
        
        setupTestEnvironment();
        EOF
        
        node test-cosmos-setup.js

    - name: Generate and Insert Test Data
      run: |
        echo "Generating and inserting test PEN records..."
        
        # Create Node.js script for test data generation
        cat > generate-test-data.js << 'EOF'
        const { CosmosClient } = require('@azure/cosmos');
        const { v4: uuidv4 } = require('uuid');
        
        async function generateTestData() {
          try {
            const client = new CosmosClient({
              endpoint: process.env.AZURE_COSMOSDB_ENDPOINT,
              key: process.env.AZURE_COSMOSDB_KEY
            });
            
            const database = client.database(process.env.TEST_DATABASE_NAME);
            const container = database.container(process.env.TEST_CONTAINER_NAME);
            
            const testCount = parseInt(process.env.TEST_DATA_COUNT || '10');
            console.log(`📝 Generating ${testCount} test PEN records...`);
            
            const firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emily', 'Robert', 'Lisa', 'William', 'Ashley'];
            const lastNames = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller', 'Davis', 'Rodriguez', 'Martinez'];
            const middleNames = ['Alexander', 'Marie', 'James', 'Elizabeth', 'Michael', 'Anne', 'Christopher', 'Nicole', 'Daniel', 'Michelle'];
            
            const testRecords = [];
            
            for (let i = 1; i <= testCount; i++) {
              const record = {
                id: uuidv4(),
                pen: `PEN${String(i).padStart(6, '0')}`, // Partition key
                legalFirstName: firstNames[i % firstNames.length],
                legalMiddleNames: Math.random() > 0.3 ? middleNames[i % middleNames.length] : null,
                legalLastName: lastNames[i % lastNames.length],
                dob: new Date(1980 + (i % 40), (i % 12), (i % 28) + 1).toISOString().split('T')[0],
                localID: Math.random() > 0.5 ? `LOCAL${String(i).padStart(4, '0')}` : null,
                createdAt: new Date().toISOString(),
                testRecord: true
              };
              
              testRecords.push(record);
            }
            
            console.log('💾 Inserting records into Cosmos DB...');
            let insertedCount = 0;
            
            for (const record of testRecords) {
              try {
                await container.items.create(record);
                insertedCount++;
                if (insertedCount % 5 === 0) {
                  console.log(`Inserted ${insertedCount}/${testCount} records...`);
                }
              } catch (error) {
                console.error(`Failed to insert record ${record.pen}:`, error.message);
              }
            }
            
            console.log(`✅ Successfully inserted ${insertedCount} test records`);
            
            // Verify insertion
            const { resources: allItems } = await container.items
              .query('SELECT * FROM c WHERE c.testRecord = true')
              .fetchAll();
            
            console.log(`📊 Total test records in container: ${allItems.length}`);
            
          } catch (error) {
            console.error('❌ Test data generation failed:', error.message);
            process.exit(1);
          }
        }
        
        generateTestData();
        EOF
        
        TEST_DATA_COUNT="${{ github.event.inputs.test_data_count || '10' }}" node generate-test-data.js

    - name: Test CRUD Operations
      run: |
        echo "Testing CRUD operations..."
        
        cat > test-crud-operations.js << 'EOF'
        const { CosmosClient } = require('@azure/cosmos');
        const { v4: uuidv4 } = require('uuid');
        
        async function testCrudOperations() {
          try {
            const client = new CosmosClient({
              endpoint: process.env.AZURE_COSMOSDB_ENDPOINT,
              key: process.env.AZURE_COSMOSDB_KEY
            });
            
            const database = client.database(process.env.TEST_DATABASE_NAME);
            const container = database.container(process.env.TEST_CONTAINER_NAME);
            
            // Test CREATE
            console.log('🔧 Testing CREATE operation...');
            const newRecord = {
              id: uuidv4(),
              pen: 'TESTPEN001',
              legalFirstName: 'Test',
              legalMiddleNames: 'CRUD',
              legalLastName: 'User',
              dob: '1990-01-01',
              localID: 'TESTLOCAL001',
              createdAt: new Date().toISOString(),
              testRecord: true
            };
            
            const { resource: createdItem } = await container.items.create(newRecord);
            console.log('✅ CREATE: Record created successfully');
            
            // Test READ
            console.log('🔍 Testing READ operation...');
            const { resource: readItem } = await container.item(createdItem.id, 'TESTPEN001').read();
            console.log('✅ READ: Record retrieved successfully');
            console.log(`   Name: ${readItem.legalFirstName} ${readItem.legalLastName}`);
            
            // Test UPDATE
            console.log('✏️ Testing UPDATE operation...');
            readItem.legalMiddleNames = 'Updated';
            readItem.updatedAt = new Date().toISOString();
            const { resource: updatedItem } = await container.item(readItem.id, 'TESTPEN001').replace(readItem);
            console.log('✅ UPDATE: Record updated successfully');
            
            // Test QUERY
            console.log('🔎 Testing QUERY operations...');
            
            // Query by name
            const nameQuery = "SELECT * FROM c WHERE c.legalFirstName = 'Test'";
            const { resources: nameResults } = await container.items.query(nameQuery).fetchAll();
            console.log(`✅ QUERY (by name): Found ${nameResults.length} records`);
            
            // Query by date range
            const dateQuery = "SELECT * FROM c WHERE c.dob >= '1985-01-01' AND c.dob <= '1995-12-31'";
            const { resources: dateResults } = await container.items.query(dateQuery).fetchAll();
            console.log(`✅ QUERY (by date range): Found ${dateResults.length} records`);
            
            // Query with pagination
            const paginatedQuery = container.items.query('SELECT * FROM c WHERE c.testRecord = true', {
              maxItemCount: 5
            });
            let pageCount = 0;
            let totalResults = 0;
            
            for await (const { resources: pageResults } of paginatedQuery.getAsyncIterator()) {
              pageCount++;
              totalResults += pageResults.length;
            }
            console.log(`✅ QUERY (paginated): ${totalResults} total records across ${pageCount} pages`);
            
            // Test DELETE
            console.log('🗑️ Testing DELETE operation...');
            await container.item(createdItem.id, 'TESTPEN001').delete();
            console.log('✅ DELETE: Record deleted successfully');
            
            console.log('🎉 All CRUD operations completed successfully!');
            
          } catch (error) {
            console.error('❌ CRUD operations failed:', error.message);
            process.exit(1);
          }
        }
        
        testCrudOperations();
        EOF
        
        node test-crud-operations.js

    - name: Test Performance and Metrics
      run: |
        echo "Testing performance and getting metrics..."
        
        cat > test-performance.js << 'EOF'
        const { CosmosClient } = require('@azure/cosmos');
        
        async function testPerformance() {
          try {
            const client = new CosmosClient({
              endpoint: process.env.AZURE_COSMOSDB_ENDPOINT,
              key: process.env.AZURE_COSMOSDB_KEY
            });
            
            const database = client.database(process.env.TEST_DATABASE_NAME);
            const container = database.container(process.env.TEST_CONTAINER_NAME);
            
            console.log('⚡ Running performance tests...');
            
            // Test query performance
            const startTime = Date.now();
            const { resources: allRecords } = await container.items
              .query('SELECT * FROM c WHERE c.testRecord = true')
              .fetchAll();
            const queryTime = Date.now() - startTime;
            
            console.log(`📊 Query Performance:`);
            console.log(`   Records returned: ${allRecords.length}`);
            console.log(`   Query time: ${queryTime}ms`);
            
            // Get container metrics
            const { resource: containerInfo } = await container.read();
            console.log(`📈 Container Information:`);
            console.log(`   Container ID: ${containerInfo.id}`);
            console.log(`   Partition Key: ${containerInfo.partitionKey.paths[0]}`);
            console.log(`   Indexing Mode: ${containerInfo.indexingPolicy.indexingMode}`);
            
            // Test different query patterns
            const queries = [
              { name: 'Find by First Name', query: "SELECT * FROM c WHERE c.legalFirstName = 'John'" },
              { name: 'Find by Last Name', query: "SELECT * FROM c WHERE c.legalLastName = 'Smith'" },
              { name: 'Find by DOB Range', query: "SELECT * FROM c WHERE c.dob >= '1990-01-01' AND c.dob <= '1999-12-31'" },
              { name: 'Count Records', query: "SELECT VALUE COUNT(1) FROM c WHERE c.testRecord = true" }
            ];
            
            for (const queryTest of queries) {
              const start = Date.now();
              const { resources: results } = await container.items.query(queryTest.query).fetchAll();
              const time = Date.now() - start;
              console.log(`   ${queryTest.name}: ${Array.isArray(results) ? results.length : results} results in ${time}ms`);
            }
            
          } catch (error) {
            console.error('❌ Performance test failed:', error.message);
            process.exit(1);
          }
        }
        
        testPerformance();
        EOF
        
        node test-performance.js

    - name: Run Application Tests (if exists)
      run: |
        if [ -f "package.json" ] && ([ -d "test" ] || [ -d "tests" ]); then
          echo "Running application-specific Cosmos DB tests..."
          npm test -- --grep "cosmos\|database" || echo "No Cosmos DB tests found or test command failed"
        else
          echo "No test directory found, skipping application tests"
        fi
      env:
        NODE_ENV: test
        AZURE_COSMOSDB_CONNECTION_STRING: ${{ env.AZURE_COSMOSDB_CONNECTION_STRING }}
        AZURE_COSMOSDB_ENDPOINT: ${{ env.AZURE_COSMOSDB_ENDPOINT }}
        AZURE_COSMOSDB_KEY: ${{ env.AZURE_COSMOSDB_KEY }}
        AZURE_COSMOSDB_DATABASE_NAME: ${{ env.TEST_DATABASE_NAME }}
        AZURE_COSMOSDB_CONTAINER_NAME: ${{ env.TEST_CONTAINER_NAME }}

    - name: Export Test Data (Optional)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Exporting test data for analysis..."
        
        cat > export-data.js << 'EOF'
        const { CosmosClient } = require('@azure/cosmos');
        const fs = require('fs');
        
        async function exportData() {
          try {
            const client = new CosmosClient({
              endpoint: process.env.AZURE_COSMOSDB_ENDPOINT,
              key: process.env.AZURE_COSMOSDB_KEY
            });
            
            const database = client.database(process.env.TEST_DATABASE_NAME);
            const container = database.container(process.env.TEST_CONTAINER_NAME);
            
            const { resources: allRecords } = await container.items
              .query('SELECT * FROM c WHERE c.testRecord = true')
              .fetchAll();
            
            const exportData = {
              exportDate: new Date().toISOString(),
              recordCount: allRecords.length,
              records: allRecords
            };
            
            fs.writeFileSync('test-data-export.json', JSON.stringify(exportData, null, 2));
            console.log(`📤 Exported ${allRecords.length} records to test-data-export.json`);
            
          } catch (error) {
            console.error('❌ Data export failed:', error.message);
          }
        }
        
        exportData();
        EOF
        
        node export-data.js

    - name: Upload Test Data Export
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: cosmos-test-data-export
        path: test-data-export.json
        retention-days: 7

    - name: Cleanup Test Environment
      if: always()
      run: |
        echo "Cleaning up test environment..."
        
        cat > cleanup.js << 'EOF'
        const { CosmosClient } = require('@azure/cosmos');
        
        async function cleanup() {
          try {
            const client = new CosmosClient({
              endpoint: process.env.AZURE_COSMOSDB_ENDPOINT,
              key: process.env.AZURE_COSMOSDB_KEY
            });
            
            console.log('🧹 Deleting test container...');
            const database = client.database(process.env.TEST_DATABASE_NAME);
            
            try {
              await database.container(process.env.TEST_CONTAINER_NAME).delete();
              console.log('✅ Test container deleted');
            } catch (error) {
              console.log('⚠️ Test container may not exist or already deleted');
            }
            
            console.log('🧹 Deleting test database...');
            try {
              await database.delete();
              console.log('✅ Test database deleted');
            } catch (error) {
              console.log('⚠️ Test database may not exist or already deleted');
            }
            
            console.log('🎯 Cleanup completed');
            
          } catch (error) {
            console.error('⚠️ Cleanup failed (non-critical):', error.message);
          }
        }
        
        cleanup();
        EOF
        
        node cleanup.js || echo "Cleanup completed with warnings"