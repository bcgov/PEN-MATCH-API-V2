name: Test Azure Cosmos DB

on:
  workflow_dispatch:
    inputs:
      test_data_count:
        description: 'Number of test records to create'
        required: false
        default: '10'
        type: string
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/test-cosmos.yml'
  pull_request:
    branches: [ main ]

env:
  AZURE_COSMOSDB_ENDPOINT: ${{ secrets.AZURE_COSMOSDB_ENDPOINT }}
  AZURE_COSMOSDB_KEY: ${{ secrets.AZURE_COSMOSDB_KEY }}
  AZURE_COSMOSDB_DATABASE_NAME: ${{ secrets.AZURE_COSMOSDB_DATABASE_NAME }}
  AZURE_COSMOSDB_CONTAINER_NAME: ${{ secrets.AZURE_COSMOSDB_CONTAINER_NAME }}
  TEST_CONTAINER_NAME: "test-pen-records"
  TEST_DATABASE_NAME: "test-pen-database"

jobs:
  test-cosmos-db:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        pip install azure-cosmos python-dotenv requests

    - name: Validate Cosmos DB Configuration
      run: |
        echo "Validating Cosmos DB configuration..."
        
        if [ -z "$AZURE_COSMOSDB_ENDPOINT" ]; then
          echo "❌ AZURE_COSMOSDB_ENDPOINT is not set"
          exit 1
        fi
        
        if [ -z "$AZURE_COSMOSDB_KEY" ]; then
          echo "❌ AZURE_COSMOSDB_KEY is not set"
          exit 1
        fi
        
        if [ -z "$AZURE_COSMOSDB_DATABASE_NAME" ]; then
          echo "❌ AZURE_COSMOSDB_DATABASE_NAME is not set"
          exit 1
        fi
        
        if [ -z "$AZURE_COSMOSDB_CONTAINER_NAME" ]; then
          echo "❌ AZURE_COSMOSDB_CONTAINER_NAME is not set"
          exit 1
        fi
        
        if [[ ! "$AZURE_COSMOSDB_ENDPOINT" =~ ^https://.*\.documents\.azure\.com:443/?$ ]]; then
          echo "❌ AZURE_COSMOSDB_ENDPOINT format is incorrect"
          echo "Expected format: https://account-name.documents.azure.com:443/"
          exit 1
        fi
        
        echo "✅ Cosmos DB configuration validated"

    - name: Create Test Database and Container
      run: |
        echo "Creating test database and container..."
        python -c "
        from azure.cosmos import CosmosClient
        import os
        
        client = CosmosClient(os.environ['AZURE_COSMOSDB_ENDPOINT'], os.environ['AZURE_COSMOSDB_KEY'])
        
        # Create test database
        database = client.create_database_if_not_exists(
            id=os.environ['TEST_DATABASE_NAME'],
            offer_throughput=400
        )
        print(f'✅ Database created: {database.id}')
        
        # Create test container
        container = database.create_container_if_not_exists(
            id=os.environ['TEST_CONTAINER_NAME'],
            partition_key={'paths': ['/pen'], 'kind': 'Hash'}
        )
        print(f'✅ Container created: {container.id}')
        "

    - name: Run Cosmos DB Tests
      run: |
        python tests/cosmos.py
      env:
        TEST_DATA_COUNT: ${{ github.event.inputs.test_data_count || '10' }}

    - name: Cleanup Test Environment
      if: always()
      run: |
        echo "Cleaning up test environment..."
        python -c "
        from azure.cosmos import CosmosClient
        import os
        
        try:
            client = CosmosClient(os.environ['AZURE_COSMOSDB_ENDPOINT'], os.environ['AZURE_COSMOSDB_KEY'])
            database = client.get_database_client(os.environ['TEST_DATABASE_NAME'])
            
            # Delete test container
            container = database.get_container_client(os.environ['TEST_CONTAINER_NAME'])
            container.delete_container()
            print('✅ Test container deleted')
            
            # Delete test database
            database.delete_database()
            print('✅ Test database deleted')
            
        except Exception as e:
            print(f'⚠️ Cleanup completed with warnings: {e}')
        "