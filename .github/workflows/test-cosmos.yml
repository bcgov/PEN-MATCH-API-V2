name: Test Cosmos DB Connection via App Service

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/cosmos.py'
      - '.github/workflows/test-cosmos.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  test-cosmos-connection:
    name: Test Cosmos DB Connection
    runs-on: ubuntu-latest
    environment: dev
    timeout-minutes: 10
    
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      APP_SERVICE_NAME: ${{ secrets.APP_SERVICE_NAME }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Prepare Deployment Package
        run: |
          echo "üì¶ Preparing cosmos test package..."
          mkdir -p deployment
          cp app/cosmos.py deployment/
          
          # Create requirements.txt
          cat > deployment/requirements.txt << EOF
          azure-cosmos>=4.5.0
          azure-identity>=1.15.0
          flask>=2.3.0
          EOF
          
          # Create simple Flask app for health check
          cat > deployment/app.py << 'EOF'
          from cosmos import test_connection
          from flask import Flask
          
          app = Flask(__name__)
          
          @app.route('/')
          @app.route('/health')
          def health():
              return test_connection()
          
          if __name__ == "__main__":
              app.run(host='0.0.0.0', port=8000)
          EOF

      - name: Configure App Service Environment
        run: |
          echo "‚öôÔ∏è Setting Cosmos DB environment variables..."
          az webapp config appsettings set \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $APP_SERVICE_NAME \
            --settings \
              AZURE_COSMOSDB_ENDPOINT="${{ secrets.AZURE_COSMOSDB_ENDPOINT }}" \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              ENABLE_ORYX_BUILD=true

      - name: Deploy to App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.APP_SERVICE_NAME }}
          package: './deployment'

      - name: Wait for App Service Startup
        run: |
          echo "‚è≥ Waiting for App Service to start..."
          sleep 45
          
          # Get App Service URL
          APP_URL=$(az webapp show \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $APP_SERVICE_NAME \
            --query "defaultHostName" -o tsv)
          
          echo "APP_URL=https://$APP_URL" >> $GITHUB_ENV
          echo "üåê App Service URL: https://$APP_URL"

      - name: Test Cosmos DB Connection
        run: |
          echo "üß™ Testing Cosmos DB connection via HTTP endpoint..."
          
          # Test the health endpoint
          echo "Testing: $APP_URL/health"
          
          # Retry logic for connection test
          for i in {1..5}; do
            echo "Attempt $i/5..."
            RESPONSE=$(curl -s -w "%{http_code}" "$APP_URL/health" || echo "000")
            HTTP_CODE=$(echo "$RESPONSE" | tail -c 4)
            BODY=$(echo "$RESPONSE" | head -c -4)
            
            echo "HTTP Status: $HTTP_CODE"
            echo "Response: $BODY"
            
            if [ "$HTTP_CODE" = "200" ] && [[ "$BODY" == *"‚úÖ Connected!"* ]]; then
              echo "‚úÖ Cosmos DB connection test PASSED"
              exit 0
            fi
            
            if [ $i -lt 5 ]; then
              echo "‚è≥ Waiting 30s before retry..."
              sleep 30
            fi
          done
          
          echo "‚ùå Cosmos DB connection test FAILED after 5 attempts"
          exit 1

      - name: Get App Service Logs (if failed)
        if: failure()
        run: |
          echo "üìã Getting App Service logs for debugging..."
          
          # Get recent logs
          az webapp log tail \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $APP_SERVICE_NAME \
            --timeout 30 || true
          
          # Also try to get deployment logs
          az webapp log deployment show \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $APP_SERVICE_NAME || true