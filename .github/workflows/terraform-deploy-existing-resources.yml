name: Terraform Deploy with Existing Resources

on:
#   push:
#     branches:
#       - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    environment: dev
    timeout-minutes: 45
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
      TF_INPUT: false
      TF_IN_AUTOMATION: true

      # Application variables
      TF_VAR_azure_openai_api_key: ${{ secrets.AZURE_OPENAI_API_KEY }}
      TF_VAR_vnet_name: ${{ secrets.VNET_NAME }}
      TF_VAR_vnet_resource_group_name: ${{ secrets.VNET_RESOURCE_GROUP_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Validate
        working-directory: ./infra
        run: terraform validate

      - name: Import Existing Resources (Inline)
        working-directory: ./infra
        timeout-minutes: 15
        continue-on-error: true
        run: |
          echo "=== Azure Resource Import Process ==="
          echo "ARM_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID:0:8}..."
          echo "TF_VAR_vnet_resource_group_name: $TF_VAR_vnet_resource_group_name"
          
          # Function to safely import a resource
          import_resource() {
              local terraform_address="$1"
              local azure_resource_id="$2"
              local resource_name="$3"
              
              echo "----------------------------------------"
              echo "Importing: $resource_name"
              
              # Check if resource is already in state
              if terraform state show "$terraform_address" >/dev/null 2>&1; then
                  echo "✓ Resource already in Terraform state: $resource_name"
                  return 0
              fi
              
              # Check if Azure resource exists
              echo "Checking if Azure resource exists..."
              if ! az resource show --ids "$azure_resource_id" >/dev/null 2>&1; then
                  echo "⚠ Azure resource does not exist: $resource_name"
                  return 0
              fi
              
              # Attempt import with variable file
              echo "Importing resource..."
              if timeout 120s terraform import -input=false -var-file="main.tfvars.json" "$terraform_address" "$azure_resource_id"; then
                  echo "✓ Successfully imported: $resource_name"
                  return 0
              else
                  echo "✗ Failed to import: $resource_name"
                  return 1
              fi
          }
          
          # Import App Service Plan
          import_resource \
              "module.backend.azurerm_service_plan.backend" \
              "/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/pen-match-api-v2/providers/Microsoft.Web/serverFarms/pen-match-api-v2-app-backend-asp" \
              "App Service Plan"
          
          # Import Network Security Groups
          import_resource \
              "module.network.azurerm_network_security_group.privateendpoints" \
              "/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/$TF_VAR_vnet_resource_group_name/providers/Microsoft.Network/networkSecurityGroups/pen-match-api-v2-pe-nsg" \
              "Private Endpoints NSG"
          
          import_resource \
              "module.network.azurerm_network_security_group.app_service" \
              "/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/$TF_VAR_vnet_resource_group_name/providers/Microsoft.Network/networkSecurityGroups/pen-match-api-v2-as-nsg" \
              "App Service NSG"
          
          import_resource \
              "module.network.azurerm_network_security_group.web" \
              "/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/$TF_VAR_vnet_resource_group_name/providers/Microsoft.Network/networkSecurityGroups/pen-match-api-v2-web-nsg" \
              "Web NSG"
          
          import_resource \
              "module.network.azurerm_network_security_group.container_instance" \
              "/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/$TF_VAR_vnet_resource_group_name/providers/Microsoft.Network/networkSecurityGroups/pen-match-api-v2-ci-nsg" \
              "Container Instance NSG"
          
          echo "========================================="
          echo "Import process completed!"
          echo "Current Terraform state:"
          terraform state list || echo "No resources in state yet"

      - name: Terraform Plan
        working-directory: ./infra
        run: |
          echo "Running Terraform plan..."
          terraform plan -input=false -var-file="main.tfvars.json" \
                        -out=tfplan \
                        -detailed-exitcode
          
          PLAN_EXIT_CODE=$?
          if [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "CHANGES_DETECTED=true" >> $GITHUB_ENV
            echo "✅ Changes detected - will proceed with apply"
          elif [ $PLAN_EXIT_CODE -eq 0 ]; then
            echo "CHANGES_DETECTED=false" >> $GITHUB_ENV
            echo "ℹ️  No changes detected"
          else
            echo "❌ Plan failed"
            exit 1
          fi

      - name: Terraform Apply
        working-directory: ./infra
        if: env.CHANGES_DETECTED == 'true'
        timeout-minutes: 30
        run: |
          echo "Applying Terraform changes..."
          terraform apply -auto-approve tfplan

      - name: Output Results
        working-directory: ./infra
        run: |
          echo "## Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully deployed to Azure!" >> $GITHUB_STEP_SUMMARY
          terraform state list >> $GITHUB_STEP_SUMMARY